
Known inline assembler bugs in Delphi 2

You should be aware of them since this could save you the hours I spent
finding out that they're actually compiler bugs!


1. Immediate address operands

address operands of the form

    [reg32 {+reg32*X} +imm32]

will be assembled incorrectly under certain circumstances. In short: If the
low word of imm32 is zero, the high word may be ignored too in some cases.

Update: Appearantly at least this one has been fixed in Delphi 3.


2. 16 bit operands

Usual way to get the environment selector is to say something like:

mov	ah,62h
int	21h         { get psp selector }
mov	es,ebx
mov	es,es:[2ch] { get environment selector }

The last instruction will be assembled incorrectly, it seems like the inline
assembler outputs only a 16 bit address operand ( 002C ) but generates an
instruction that expects a 32 bit operand AFAIR, meaning it forgets about
adding an address operand size override prefix ($67).


Workaraound:

...

mov	ah,62h
int	21h
mov	es,ebx
mov	ebx,2ch
mov	es,es:[ebx]

Update: Reportedly still present in Delphi 3

3. CMPXCHG

This instruction will be assembled incorrectly, using an opcode that was only
valid on early steppings of the i486.

(Submitted by Stefan Hoffmeister)


4. Complex adressing modes

This is not something that will really come in your way, but it might be fun
to know that Delphi would kindly accept instructions like:

lea	eax, [eax + ebx + ecx + edx]

However, Delphi will NOT enhance the functionality of your CPU, It will simply
ignore the "+ ecx + edx" part in above instruction.

(Submitted by Stefan Hoffmeister)


Feel free to inform me if you discovered more inline assembler bugs.
